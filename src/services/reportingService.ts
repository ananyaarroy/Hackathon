import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

export interface ReportData {
  title: string;
  generatedAt: string;
  metrics: Array<{
    label: string;
    value: string | number;
    unit?: string;
    trend?: number;
  }>;
  charts?: Array<{
    title: string;
    data: any[];
  }>;
  recommendations?: string[];
  esgScores?: {
    environmental: number;
    social: number;
    governance: number;
    overall: number;
  };
}

export interface ESGReportData {
  companyName: string;
  reportPeriod: string;
  environmental: {
    carbonReduction: number;
    renewableUsage: number;
    wasteReduction: number;
    waterSavings: number;
  };
  social: {
    communityImpact: number;
    jobsCreated: number;
    healthBenefits: number;
    educationPrograms: number;
  };
  governance: {
    transparencyScore: number;
    complianceRating: number;
    ethicsScore: number;
    stakeholderEngagement: number;
  };
  overallScore: number;
  industryRanking: number;
  certifications: string[];
  improvementAreas: string[];
}

class ReportingService {
  /**
   * Export report data as PDF with professional formatting
   */
  async exportToPDF(data: ReportData): Promise<void> {
    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      let yPosition = 20;

      // Header
      pdf.setFontSize(24);
      pdf.setTextColor(16, 185, 129); // Emerald color
      pdf.text(data.title, 20, yPosition);
      yPosition += 15;

      // Generated date
      pdf.setFontSize(12);
      pdf.setTextColor(107, 114, 128); // Gray color
      pdf.text(`Generated: ${new Date(data.generatedAt).toLocaleDateString()}`, 20, yPosition);
      yPosition += 20;

      // Metrics section
      pdf.setFontSize(16);
      pdf.setTextColor(31, 41, 55); // Dark gray
      pdf.text('Key Metrics', 20, yPosition);
      yPosition += 10;

      pdf.setFontSize(11);
      data.metrics.forEach((metric) => {
        if (yPosition > pageHeight - 30) {
          pdf.addPage();
          yPosition = 20;
        }
        
        const value = typeof metric.value === 'number' 
          ? metric.value.toLocaleString() 
          : metric.value;
        const unit = metric.unit ? ` ${metric.unit}` : '';
        const trend = metric.trend ? ` (${metric.trend > 0 ? '+' : ''}${metric.trend}%)` : '';
        
        pdf.text(`${metric.label}: ${value}${unit}${trend}`, 25, yPosition);
        yPosition += 7;
      });

      // Recommendations section
      if (data.recommendations && data.recommendations.length > 0) {
        yPosition += 10;
        if (yPosition > pageHeight - 50) {
          pdf.addPage();
          yPosition = 20;
        }

        pdf.setFontSize(16);
        pdf.setTextColor(31, 41, 55);
        pdf.text('Recommendations', 20, yPosition);
        yPosition += 10;

        pdf.setFontSize(11);
        data.recommendations.forEach((rec, index) => {
          if (yPosition > pageHeight - 30) {
            pdf.addPage();
            yPosition = 20;
          }
          
          const lines = pdf.splitTextToSize(`${index + 1}. ${rec}`, pageWidth - 40);
          pdf.text(lines, 25, yPosition);
          yPosition += lines.length * 5 + 3;
        });
      }

      // ESG Scores section (if available)
      if (data.esgScores) {
        yPosition += 10;
        if (yPosition > pageHeight - 80) {
          pdf.addPage();
          yPosition = 20;
        }

        pdf.setFontSize(16);
        pdf.setTextColor(31, 41, 55);
        pdf.text('ESG Performance', 20, yPosition);
        yPosition += 15;

        pdf.setFontSize(12);
        pdf.text(`Environmental: ${data.esgScores.environmental}/100`, 25, yPosition);
        yPosition += 8;
        pdf.text(`Social: ${data.esgScores.social}/100`, 25, yPosition);
        yPosition += 8;
        pdf.text(`Governance: ${data.esgScores.governance}/100`, 25, yPosition);
        yPosition += 8;
        
        pdf.setFontSize(14);
        pdf.setTextColor(16, 185, 129);
        pdf.text(`Overall Score: ${data.esgScores.overall}/100`, 25, yPosition + 5);
      }

      // Footer
      const footerY = pageHeight - 15;
      pdf.setFontSize(8);
      pdf.setTextColor(107, 114, 128);
      pdf.text('Generated by EcoFlow Energy Optimization Platform', 20, footerY);
      pdf.text(`Page ${pdf.internal.getNumberOfPages()}`, pageWidth - 30, footerY);

      // Save the PDF
      pdf.save(`${data.title.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`);
    } catch (error) {
      console.error('PDF export failed:', error);
      throw new Error('Failed to generate PDF report');
    }
  }

  /**
   * Export report data as Excel with formatted cells
   */
  async exportToExcel(data: ReportData): Promise<void> {
    try {
      const workbook = XLSX.utils.book_new();

      // Create metrics worksheet
      const metricsData = [
        ['Metric', 'Value', 'Unit', 'Trend (%)'],
        ...data.metrics.map(metric => [
          metric.label,
          metric.value,
          metric.unit || '',
          metric.trend || ''
        ])
      ];

      const metricsSheet = XLSX.utils.aoa_to_sheet(metricsData);
      
      // Style the header row
      const headerStyle = {
        font: { bold: true, color: { rgb: "FFFFFF" } },
        fill: { fgColor: { rgb: "10B981" } },
        alignment: { horizontal: "center" }
      };

      // Apply header styling
      ['A1', 'B1', 'C1', 'D1'].forEach(cell => {
        if (metricsSheet[cell]) {
          metricsSheet[cell].s = headerStyle;
        }
      });

      XLSX.utils.book_append_sheet(workbook, metricsSheet, 'Metrics');

      // Create recommendations worksheet if available
      if (data.recommendations && data.recommendations.length > 0) {
        const recommendationsData = [
          ['#', 'Recommendation'],
          ...data.recommendations.map((rec, index) => [index + 1, rec])
        ];

        const recommendationsSheet = XLSX.utils.aoa_to_sheet(recommendationsData);
        
        // Apply header styling
        ['A1', 'B1'].forEach(cell => {
          if (recommendationsSheet[cell]) {
            recommendationsSheet[cell].s = headerStyle;
          }
        });

        XLSX.utils.book_append_sheet(workbook, recommendationsSheet, 'Recommendations');
      }

      // Create ESG worksheet if available
      if (data.esgScores) {
        const esgData = [
          ['ESG Category', 'Score'],
          ['Environmental', data.esgScores.environmental],
          ['Social', data.esgScores.social],
          ['Governance', data.esgScores.governance],
          ['Overall Score', data.esgScores.overall]
        ];

        const esgSheet = XLSX.utils.aoa_to_sheet(esgData);
        
        // Apply header styling
        ['A1', 'B1'].forEach(cell => {
          if (esgSheet[cell]) {
            esgSheet[cell].s = headerStyle;
          }
        });

        XLSX.utils.book_append_sheet(workbook, esgSheet, 'ESG Scores');
      }

      // Generate and save the Excel file
      const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
      const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      saveAs(blob, `${data.title.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.xlsx`);
    } catch (error) {
      console.error('Excel export failed:', error);
      throw new Error('Failed to generate Excel report');
    }
  }

  /**
   * Export report data as CSV
   */
  async exportToCSV(data: ReportData): Promise<void> {
    try {
      let csvContent = `${data.title}\n`;
      csvContent += `Generated: ${new Date(data.generatedAt).toLocaleDateString()}\n\n`;
      
      // Metrics section
      csvContent += 'Key Metrics\n';
      csvContent += 'Metric,Value,Unit,Trend (%)\n';
      
      data.metrics.forEach(metric => {
        const value = typeof metric.value === 'number' ? metric.value.toString() : `"${metric.value}"`;
        const unit = metric.unit || '';
        const trend = metric.trend || '';
        csvContent += `"${metric.label}",${value},"${unit}","${trend}"\n`;
      });

      // Recommendations section
      if (data.recommendations && data.recommendations.length > 0) {
        csvContent += '\nRecommendations\n';
        csvContent += '#,Recommendation\n';
        data.recommendations.forEach((rec, index) => {
          csvContent += `${index + 1},"${rec.replace(/"/g, '""')}"\n`;
        });
      }

      // ESG Scores section
      if (data.esgScores) {
        csvContent += '\nESG Performance\n';
        csvContent += 'Category,Score\n';
        csvContent += `Environmental,${data.esgScores.environmental}\n`;
        csvContent += `Social,${data.esgScores.social}\n`;
        csvContent += `Governance,${data.esgScores.governance}\n`;
        csvContent += `Overall Score,${data.esgScores.overall}\n`;
      }

      // Create and download CSV file
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      saveAs(blob, `${data.title.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.csv`);
    } catch (error) {
      console.error('CSV export failed:', error);
      throw new Error('Failed to generate CSV report');
    }
  }

  /**
   * Save report to local storage (simulating database persistence)
   */
  async saveReport(data: ReportData): Promise<void> {
    try {
      const reportId = `report_${Date.now()}`;
      const reportWithId = {
        id: reportId,
        ...data,
        savedAt: new Date().toISOString()
      };

      // Get existing reports
      const existingReports = JSON.parse(localStorage.getItem('savedReports') || '[]');
      
      // Add new report
      existingReports.push(reportWithId);
      
      // Keep only last 50 reports to prevent storage overflow
      if (existingReports.length > 50) {
        existingReports.splice(0, existingReports.length - 50);
      }

      // Save to localStorage
      localStorage.setItem('savedReports', JSON.stringify(existingReports));
      
      return reportId;
    } catch (error) {
      console.error('Save report failed:', error);
      throw new Error('Failed to save report');
    }
  }

  /**
   * Generate comprehensive ESG report
   */
  async generateESGReport(data: ESGReportData): Promise<string> {
    try {
      // Simulate report generation processing
      await new Promise(resolve => setTimeout(resolve, 1500));

      const report = {
        id: `esg_report_${Date.now()}`,
        companyName: data.companyName,
        reportPeriod: data.reportPeriod,
        generatedAt: new Date().toISOString(),
        ...data
      };

      // Save generated report
      const existingESGReports = JSON.parse(localStorage.getItem('esgReports') || '[]');
      existingESGReports.push(report);
      localStorage.setItem('esgReports', JSON.stringify(existingESGReports));

      return report.id;
    } catch (error) {
      console.error('ESG report generation failed:', error);
      throw new Error('Failed to generate ESG report');
    }
  }

  /**
   * Create and download ESG summary card image for social sharing
   */
  async createESGSummaryCard(data: ESGReportData): Promise<void> {
    try {
      // Create canvas for image generation
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      if (!ctx) {
        throw new Error('Canvas context not available');
      }

      // Set canvas dimensions for social media (1200x630px)
      canvas.width = 1200;
      canvas.height = 630;

      // Background gradient
      const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
      gradient.addColorStop(0, '#10B981'); // Emerald
      gradient.addColorStop(1, '#059669'); // Darker emerald
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Company name
      ctx.fillStyle = '#FFFFFF';
      ctx.font = 'bold 48px Arial, sans-serif';
      ctx.textAlign = 'center';
      ctx.fillText(data.companyName, canvas.width / 2, 80);

      // ESG Report title
      ctx.font = '32px Arial, sans-serif';
      ctx.fillText('ESG Performance Report', canvas.width / 2, 130);

      // Report period
      ctx.font = '24px Arial, sans-serif';
      ctx.fillStyle = '#E5E7EB';
      ctx.fillText(data.reportPeriod, canvas.width / 2, 170);

      // Overall score circle
      const centerX = canvas.width / 2;
      const centerY = 320;
      const radius = 80;

      // Score circle background
      ctx.beginPath();
      ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
      ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
      ctx.fill();

      // Score circle border
      ctx.beginPath();
      ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
      ctx.strokeStyle = '#FFFFFF';
      ctx.lineWidth = 4;
      ctx.stroke();

      // Overall score text
      ctx.fillStyle = '#FFFFFF';
      ctx.font = 'bold 36px Arial, sans-serif';
      ctx.textAlign = 'center';
      ctx.fillText(data.overallScore.toString(), centerX, centerY - 10);
      ctx.font = '18px Arial, sans-serif';
      ctx.fillText('Overall Score', centerX, centerY + 20);

      // Individual scores
      const scores = [
        { label: 'Environmental', value: data.environmental.carbonReduction, x: 200 },
        { label: 'Social', value: data.social.communityImpact, x: 600 },
        { label: 'Governance', value: data.governance.transparencyScore, x: 1000 }
      ];

      scores.forEach(score => {
        // Score background
        ctx.fillStyle = 'rgba(255, 255, 255, 0.15)';
        ctx.fillRect(score.x - 80, 450, 160, 100);

        // Score value
        ctx.fillStyle = '#FFFFFF';
        ctx.font = 'bold 28px Arial, sans-serif';
        ctx.textAlign = 'center';
        ctx.fillText(score.value.toFixed(1), score.x, 485);

        // Score label
        ctx.font = '16px Arial, sans-serif';
        ctx.fillText(score.label, score.x, 510);
      });

      // Industry ranking
      ctx.fillStyle = '#FFFFFF';
      ctx.font = '20px Arial, sans-serif';
      ctx.textAlign = 'center';
      ctx.fillText(`Industry Ranking: #${data.industryRanking}`, canvas.width / 2, 580);

      // Convert canvas to blob and download
      canvas.toBlob((blob) => {
        if (blob) {
          saveAs(blob, `${data.companyName.replace(/\s+/g, '_')}_ESG_Summary_${new Date().toISOString().split('T')[0]}.png`);
        }
      }, 'image/png');

    } catch (error) {
      console.error('ESG summary card creation failed:', error);
      throw new Error('Failed to create ESG summary card');
    }
  }
}

export const reportingService = new ReportingService();